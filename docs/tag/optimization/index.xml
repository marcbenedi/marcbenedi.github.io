<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Optimization | Marc Benedi</title>
    <link>https://marcb.pro/tag/optimization/</link>
      <atom:link href="https://marcb.pro/tag/optimization/index.xml" rel="self" type="application/rss+xml" />
    <description>Optimization</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><copyright>© 2022 marcb.pro</copyright><lastBuildDate>Mon, 27 Apr 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://marcb.pro/media/icon_hu70342a21c76a6b108e6681806083fa2b_864_512x512_fill_lanczos_center_3.png</url>
      <title>Optimization</title>
      <link>https://marcb.pro/tag/optimization/</link>
    </image>
    
    <item>
      <title>Divergence-Free Shape Correspondence with Time Dependent Vector Fields</title>
      <link>https://marcb.pro/project/idp/</link>
      <pubDate>Mon, 27 Apr 2020 00:00:00 +0000</pubDate>
      <guid>https://marcb.pro/project/idp/</guid>
      <description>&lt;p&gt;In this project, we extended the work of Eisenberger, Zorah, Cremers, &amp;ldquo;Divergence-Free Shape Interpolation and Correspondence&amp;rdquo; &lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;. In their work, they present a method to calculate deformation fields between shapes embedded in $\mathbb{R}^D$. To do so, they compute a divergence-free deformation field represented in a coarse-to-fine basis using the Karhunen-Loéve expansion.&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-example-of-parts-of-a-shape-moving-in-different-directions-in-the-same-part-of-the-space-1httpsarxivorgabs180610417&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Example of parts of the shape moving in different directions at the same point&#34; srcset=&#34;
               /project/idp/original_failure_hu2e417c26d152ffe032d80c0ee68ef5f2_11630_76c5fedfb64bdc878835f811044ebd2e.jpg 400w,
               /project/idp/original_failure_hu2e417c26d152ffe032d80c0ee68ef5f2_11630_df7f49ebcb2a09e8f8898b2e2497a147.jpg 760w,
               /project/idp/original_failure_hu2e417c26d152ffe032d80c0ee68ef5f2_11630_1200x1200_fit_q75_lanczos.jpg 1200w&#34;
               src=&#34;https://marcb.pro/project/idp/original_failure_hu2e417c26d152ffe032d80c0ee68ef5f2_11630_76c5fedfb64bdc878835f811044ebd2e.jpg&#34;
               width=&#34;464&#34;
               height=&#34;243&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Example of parts of a shape moving in different directions in the same part of the space &lt;a href=&#34;https://arxiv.org/abs/1806.10417&#34;&gt;[1]&lt;/a&gt;
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h1 id=&#34;our-contribution&#34;&gt;Our Contribution&lt;/h1&gt;
&lt;p&gt;As stated by the original authors, one of the limitations of their work is in movements where different parts of the shape move through the same
region of the embedding space in a contradictory manner.
Their method cannot model such deformation because a vector field can only contain a single vector per point in space.&lt;/p&gt;
&lt;p&gt;To overcome this limitation, Eisenberger suggested using time-dependent vector fields, such that a vector at a given point in space can change over time. For that, we solve correspondence and matching problems for the whole sequence during optimization.&lt;/p&gt;
&lt;h1 id=&#34;results&#34;&gt;Results&lt;/h1&gt;
&lt;p&gt;
&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/3cAmUDDTHYs&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/gUWHj9HRdkA&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/VISp8TJIm5g&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;h1 id=&#34;notes&#34;&gt;Notes&lt;/h1&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://arxiv.org/abs/1806.10417&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://arxiv.org/abs/1806.10417&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item>
    
    <item>
      <title>Design of an environment for solving pseudo-Boolean optimization problems</title>
      <link>https://marcb.pro/project/tfg/</link>
      <pubDate>Tue, 26 Jun 2018 00:00:00 +0000</pubDate>
      <guid>https://marcb.pro/project/tfg/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Bachelor&amp;rsquo;s thesis&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Boolean_satisfiability_problem&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Boolean Satisfiability problems (SAT)&lt;/a&gt; consists of finding a valid assignment (model) for a set of Boolean variables. It was the first problem proven to be NP-Complete which allowed reducing many NP-Complete problems to it. Because of this, it is one of the pillars of Computer Science.&lt;/p&gt;
&lt;p&gt;An extension to SAT is Pseud-Boolean optimization problems. Unlike SAT, which can only express binary relationships among variables, Pseudo-Boolean optimization can formalize more &lt;a href=&#34;https://en.wikipedia.org/wiki/Pseudo-Boolean_function&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;complex relationships&lt;/a&gt;. These problems are defined in the following manner:&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-pseudo-boolean-optimization-formulation-figure-source-mpbo-a-distributed-pseudo-boolean-optimization-solver-1httpswwwsemanticscholarorgpapermpbo-a-distributed-pseudo-boolean-optimization-santos-godinho52ee5d8996c6f6d5caa43ad35155f404ddc584e3&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;TODO&#34; srcset=&#34;
               /project/tfg/pb_formula_hua71ef25e4bba6659a85d75e59ef303b2_12709_640a1a4dfa86b9bcf9bc73edf21b39d4.png 400w,
               /project/tfg/pb_formula_hua71ef25e4bba6659a85d75e59ef303b2_12709_d1cea047ade0f6be79814e65c690c06f.png 760w,
               /project/tfg/pb_formula_hua71ef25e4bba6659a85d75e59ef303b2_12709_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://marcb.pro/project/tfg/pb_formula_hua71ef25e4bba6659a85d75e59ef303b2_12709_640a1a4dfa86b9bcf9bc73edf21b39d4.png&#34;
               width=&#34;400&#34;
               height=&#34;272&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Pseudo-Boolean Optimization formulation. Figure source: MPBO A Distributed Pseudo-Boolean Optimization Solver &lt;a href=&#34;https://www.semanticscholar.org/paper/MPBO-A-Distributed-Pseudo-Boolean-Optimization-Santos-Godinho/52ee5d8996c6f6d5caa43ad35155f404ddc584e3&#34;&gt;[1]&lt;/a&gt;
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h1 id=&#34;example-knapsack-problem&#34;&gt;Example: Knapsack problem&lt;/h1&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-source-2httpsenwikipediaorgwikiknapsack_problem&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;TODO&#34; srcset=&#34;
               /project/tfg/250px-Knapsack.svg_hu52b2a063a60a593cdca3ed71e3480a80_25397_0a7817f225c95e5599457f99cb8162fd.png 400w,
               /project/tfg/250px-Knapsack.svg_hu52b2a063a60a593cdca3ed71e3480a80_25397_721c4c0584b815ed58dec15242ef7a51.png 760w,
               /project/tfg/250px-Knapsack.svg_hu52b2a063a60a593cdca3ed71e3480a80_25397_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://marcb.pro/project/tfg/250px-Knapsack.svg_hu52b2a063a60a593cdca3ed71e3480a80_25397_0a7817f225c95e5599457f99cb8162fd.png&#34;
               width=&#34;250&#34;
               height=&#34;217&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Source &lt;a href=&#34;https://en.wikipedia.org/wiki/Knapsack_problem&#34;&gt;[2]&lt;/a&gt;
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Given a set of items, each one with a value and a weight, and a knapsack with a maximum capacity, the goal is to select some objects to put inside the knapsack in a way that the weight is not bigger than the knapsack’s capacity and the total value is maximised.&lt;/p&gt;
&lt;p&gt;The variables for this problem, given $n$ objects, are:
$$o_1, o_2, \ldots , o_n \text{for the objects}$$
$$w_1, w_2, \ldots , w_n \text{for the weights}$$
$$v_1, v_2, \ldots , v_n \text{for the values}$$
There is only one constraint which represent the maximum capacity of the knapsack problem:
$$w_0 o_0 + w_1 o_1+  \ldots w_n o_n \leq knapsack&amp;rsquo;s \ capacity$$
And the cost function:
$$v_0 o_0 + v_1 o_1+  \ldots v_n o_n $$&lt;/p&gt;
&lt;h1 id=&#34;sat-solvers&#34;&gt;SAT Solvers&lt;/h1&gt;
&lt;p&gt;A SAT solver is a tool that aims at solving Boolean Satisfiability problems. However, they take as input Boolean formulas in Conjunctive Normal Form (CNF).
In this project, we propose an efficient encoding for converting Pseudo-Boolean minimisation problems into CNF constraints. If this encoding is not efficient, the size and difficulty of the problem can increase exponentially.&lt;/p&gt;
&lt;h1 id=&#34;proposed-encoding&#34;&gt;Proposed encoding&lt;/h1&gt;
&lt;p&gt;The proposed encoding is based on the idea that if a function&amp;rsquo;s primes cover a small space then a lot of clauses will be required when encoding it into a CNF.
For more details see the &lt;a href=&#34;https://marcb.pro/project/tfg/slides.pdf&#34;&gt;slides&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&#34;notes&#34;&gt;Notes&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.semanticscholar.org/paper/MPBO-A-Distributed-Pseudo-Boolean-Optimization-Santos-Godinho/52ee5d8996c6f6d5caa43ad35155f404ddc584e3&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.semanticscholar.org/paper/MPBO-A-Distributed-Pseudo-Boolean-Optimization-Santos-Godinho/52ee5d8996c6f6d5caa43ad35155f404ddc584e3&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Knapsack_problem&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://en.wikipedia.org/wiki/Knapsack_problem&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
  </channel>
</rss>
